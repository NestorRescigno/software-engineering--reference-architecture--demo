# *********************************************************************
# *************                 IAG                       *************
# *************       by Software Engineering             *************
# *********************************************************************
# This action yaml represents the different steps to perform 
# for a deployment in environment 
# usage architecture reference workflow

# currently it is only possible to configure 
# two types of languages "java and angular"
# this example use java
#
name: CI
on:
    workflow_dispatch:
#  pull_request:
    # Sequence of patterns matched against refs/heads
#    branches: [ main, develop ]
env:
  PROJECT: "best-practice"
  LENGUAGE: "java"
  ENVIROMENT_DEV: "development"
  ENVIROMENT_DEV_PREFIX: "dev"
  ENVIROMENT_INT: "integration"
  ENVIROMENT_INT_PREFIX: "int"
  INSTANCE_TYPE: "t4g.micro"
  SCANCODE_ALLOW: false
  SONAR_HOST: "https://sonar.corp.iberia.es"
  SONAR_USER:  ${{ secrets.IBIS_SONAR_REPO_USER }}
  SONAR_PWD:  ${{ secrets.IBIS_SONAR_REPO_PASS }}
  SONAR_TOKEN:  ${{ secrets.IBIS_SONAR_TOKEN }}
  SONAR_CL_VER: ""
  VULNERABILITY_HOST: ""
  VULNERABILITY_USER: ""
  VULNERABILITY_TOKEN: ""
jobs:
  cicd:
    runs-on: [ancillaries, build]
    # runs-on: [Integration]
    steps:
        # clear source
        - name: Permission Control
          run: |
            echo $USER
            sudo chown -R $USER:$USER $GITHUB_WORKSPACE
            echo ${{ env.GITHUB_REF_NAME }}
        # checkout source code in runner 
        - name: Checkout source
          uses: actions/checkout@v2.4.2
        # checkout source workflow action base in runner   
        - name: Checkout actions
          uses: actions/checkout@v2.4.2
          with:
            repository: 'Iberia-Ent/software-engineering--reference-architecture--workflow'
            token: ${{ secrets.TOKEN_REP }}
            ref: 'main'
            path: '.github/cicd'
        # Configure step build process    
        - name: build
          id: output-build
          uses: ./.github/cicd/github_actions/build
          with:
              project-name: ${{ env.PROJECT }}
              lenguage-code: ${{ env.LENGUAGE }}
              aws-access-key: ${{secrets.AWS_ACCESS_KEY}} 
              aws-secret-acesss-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
              # active true repositorio codeartifact - required: true - default: false (nexus adopt)      
              # user registry artifact - if codeArtifact allow then user is owner aws id.
              codeartifact-allow: true
              repository-user: ${{secrets.CODEARTIFACT_OWNER}}                
              ### Disable because is codeArtifact
              # repository-host:  ${{secrets.nexus_url}}                  
              # repository-token: ${{secrets.nexus_key}}
        # Configure step scan code process
        - name: scan
          uses: ./.github/cicd/github_actions/scan
          with:
              project-name: ${{ env.PROJECT }}
              lenguage-code: ${{ env.LENGUAGE }}
              service-name: ${{ steps.output-build.outputs.package-artifactid-name }}
              service-version: ${{ steps.output-build.outputs.package-version-name }}
        #      service-package: ${{ steps.output-build.outputs.package-type-name }}
              group-name: ${{ steps.output-build.outputs.package-groupid-name }}
        #      scancode-allow: ${{ env.SCANCODE_ALLOW }}
              sonarqube-host: ${{ env.SONAR_HOST }}
              sonarqube-user: ${{ env.SONAR_USER }}
              sonarqube-pwd: ${{ env.SONAR_PWD }}
              sonarqube-token: ${{ env.SONAR_TOKEN }}
        #      sonarqube-client-version: ${{ env.SONAR_CL_VER }}
        #      vulnerability-host: ${{ env.VULNERABILITY_HOST }}
        #      vulnerability-user: ${{ env.VULNERABILITY_USER }}
        #      vulnerability-token: ${{ env.VULNERABILITY_TOKEN }}
        # configure environment build process.
        - name: stopworkflowfortestsonar
          run: exit -1
        - name: validate-environment
          id: output-environment
          uses: ./.github/cicd/github_actions/environment
          with:
              project-name: ${{ env.PROJECT }}
              service-name: ${{ steps.output-build.outputs.package-artifactid-name }}
              group-name:   ${{ steps.output-build.outputs.package-groupid-name }}
              aws-access-key: ${{ secrets.AWS_ACCESS_KEY }} 
              aws-secret-acesss-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-environment-name: ${{ env.ENVIROMENT_INT }}
              aws-environment-prefix: ${{ env.ENVIROMENT_INT_PREFIX }}
              aws-environment-dev-name: ${{ env.ENVIROMENT_DEV }}
              aws-environment-dev-prefix: ${{ env.ENVIROMENT_DEV_PREFIX }}
        # configure deploy configure
        - name: deploy
          uses: ./.github/cicd/github_actions/deploy
          with:
             project-name: ${{ env.PROJECT }}
             lenguage-code: ${{ env.LENGUAGE }}
             aws-access-key: ${{secrets.AWS_ACCESS_KEY}} 
             aws-secret-acesss-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
             aws-environment-name: ${{ env.ENVIROMENT_INT }}
             aws-environment-prefix: ${{ env.ENVIROMENT_INT_PREFIX }}
             aws-environment-dev-name: ${{ env.ENVIROMENT_DEV }}
             aws-environment-dev-prefix: ${{ env.ENVIROMENT_DEV_PREFIX }}
             aws-instance-type: ${{ env.INSTANCE_TYPE }}
             service-name: ${{ steps.output-build.outputs.package-artifactid-name }}
             service-version: ${{ steps.output-build.outputs.package-version-name }}
             service-package: ${{ steps.output-build.outputs.package-type-name }}
             group-name: ${{ steps.output-build.outputs.package-groupid-name }}
             codeartifact-allow: true
             repository-owner: ${{secrets.CODEARTIFACT_OWNER}}
             repository-user: ${{ steps.output-build.outputs.package-usr }}
             repository-token: ${{ steps.output-build.outputs.package-key }}
             repository-host: ${{ steps.output-build.outputs.package-url }}
             repository-id: ${{ steps.output-build.outputs.package-repository }}
             testIntegration-allow: false
